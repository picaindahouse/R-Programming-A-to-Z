print(paste(tim,tom,tam,sep = ''))
y = 0
n = 10000  # Just change n here to see your answer
for (x in rnorm(n)){
if (x >= -1 & x<=1){y = y+1}
}
y_real = y/n*100
tom = toString(y_real)
tim = 'Mean(Xn) = '
tam = '%'
print(paste(tim,tom,tam,sep = ''))
myfirstvector <- c(3, 45 56, 732)
myfirstvector
myfirstvector <- c(3, 45 56, 732)
myfirstvector <- c(3, 45, 56, 732)
myfirstvector
myfirstvector <- c(3, 45, 56, 732)
myfirstvector
is.numeric(myfirstvector)
is.integer(myfirstvector)
is.double(myfirstvector)
v2 <- c(3L, 43L, 234L)
is.integer(v2)
is.numeric(v2)
v3 <- c('I', 'hate', 'this')
v3
is.character(v3)
v4 <- c(34, 45L, 'hello')
v4
seq(1,15)
1:15
1:15:2
seq(1,15,2)
rep(3, 50)
d<- rep(3,50)
is.vector(d)
myfirstvector <- c(3, 45, 56, 732)
# Below is a double only vector
# double and integer are both considered numeric data type
myfirstvector <- c(3, 45, 56, 732)
myfirstvector
is.numeric(myfirstvector)
is.integer(myfirstvector)
is.double(myfirstvector)
# This is an integer only vector
v2 <- c(3L, 43L, 234L)
is.numeric(v2)
is.integer(v2)
# This is a character only vector
v3 <- c('I', 'hate', 'this')
v3
is.character(v3)
v4 <- c(34, 45L, 'hello')
seq() # Sequence- like ':'
rep() # replicate
# Now we will look at the functions seq() and rep() which both create vectors
seq() # Sequence- like ':'
rep() # replicate
# Replicate 3 50 times:
rep(3, 50)
d<- rep(3,50)
is.vector(d)
# Can also replicate vectors:
rep(v2, 50)
tom = c('a', 'b', 'c', 'd', 'e')
tom[1]
tom[2]
tom[3]
tom[-1]
tom[1:2]
tom[::-1]
tom[:-1]
tom[1:4]
tom[-1:-5]
tom[-1:-4]
tom[-1]
tom[-3]
# The [1] & [1:3] is the same as python- just that it is indexed from 1 and not 0
tom[1]
# However [-1] is different
tom[-3]
# However [-1] is different
tom[-3]  # It removes the 3rd data
# Thus [-3:-5] means remove the 3rd to 5th data
tom[-3:-5]
# Also can put vectors into the brackets:
tom[c(1,3,5)]
# Also can put vectors into the brackets:
tom[c(1,3,5)]    # Will return the data accordingly
tim = c(3,5,6,7,9)
tom + tim
tom = c(1,2,3,4,5)
tim = c(3,5,6,7,9)
tom + tim
tim + tam
tam = c(3,4,5)
tim + tam
tom > tim
tom = c(1,2,9,4,5)
tim = c(3,5,6,7,9)
tom + tim
tom > tim
x <- rnorm(5)
x
for (i in x){
print(i)
}
print(x[j])
for (j in 1:5){
print(x[j])
}
# Vectorised Approach
c <- a + b
N <- 100
a = rnorm(100)
b = rnorm(100)
c <- a + b
# De-vectorised Approach
d <- c()
d
e <- rep(NA, N)
e
d <- c()
for (i in 1:N){
d[i] <- a[i] * b[i]
}
d
c
# Vectorised Approach
c <- a * b
c
d
# If one of your vectors has lesser number of data- it will restart your vector
# Eg: tam- c(3,4,5) will become c(3,4,5,3,4) when added to tim
tim + tam
x <- rnorm(5)
N <- 100
the vectorised approach is easier to write
# And more importantly- the vectorised approach is faster
# If you were to increase N to millions, you will see little to no lag with the first approach
# But there will be a visible lag with the latter approach
# This is because R is a vector based program
?rnorm
rnorm(3,10, 5)
rnorm (3, mean = 10, sd = 5)
rnorm (3, mean = 10, sd = 5)  # Can also specify if you want to be safe
library(ggplot2)
#Solution
profit <- revenue - expenses
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
#Solution
profit <- revenue - expenses
profit_after_tax <- profit/100 * 70
profit_margin <- profit_after_tax / revenue
sum(profit)
Mean_profit <- sum(profit_after_tax)/12
profit_after_tax > Mean_profit
good_month <- profit_after_tax > Mean_profit
if (profit_after_tax > Mean_profit){good_month}
for (i in profit_after_tax){if (i>Mean_profit){good_month}}
tom.append(2)
tom = c(1,2,3)
tom = for (i in profit_after_tax){if (i > Mean_profit){i}}
tom = for (i in profit_after_tax){if (i > 3){i}}
tom = for (i in profit_after_tax){i +2}
tom = for (i in profit_after_tax){i +2}
tom = for (i in 1:12){i + 2}
tom = for (i in 1:12){i + 2}
tom = for (i in 1:12){i + 2}
for (i in 1:12){i + 2}
for (x in 1:12){x + 2}
for (x in 1:12){print(x + 2)}
tom = for (x in 1:12){x + 2}
tom
tom = for (x in 1:12){c(x + 2)}
tom
for (x in 1:12){c(x + 2)
for (x in 1:12){c(x + 2)}
for (x in 1:12){c(x + 2)}
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
#Solution
profit <- revenue - expenses
stop
ctr(L)
5 + 4
for (x in 1:12){c(x + 2)}
tom = for (x in 1:12){c(x + 2)}
tom = c(for (x in 1:12){x + 2})
for (x in 1:12){print(x + 2)}
tom = for (x in 1:12){print(x + 2)}
tom
tom = c(10,12)
tom + c(12)
tom = c(10,12)
tom
?c()
tim = c(tom, 12)
for (x in 1:12){tom = c(tom,x)}
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
#Solution
profit <- revenue - expenses
profit_after_tax <- profit/100 * 70
profit_margin <- profit_after_tax / revenue
Mean_profit <- sum(profit_after_tax)/12
rm(tim)
rm(tom)
rm(x)
for (x in profit_after_tax)
{if (x > Mean_profit)
{good_month <- c(good_month,x)}}
good_month <- c()
for (x in profit_after_tax)
{if (x > Mean_profit)
{good_month <- c(good_month,x)}}
bad_month <- c()
for (x in profit_after_tax)
{if (x < Mean_profit)
{bad_month <- c(bad_month,x)}}
mean(profit_after_tax)
Mean_profit <- mean(profit_after_tax)
Mean_profit <- mean(profit_after_tax)
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
#Solution
profit <- revenue - expenses
profit_after_tax <- profit/100 * 70
profit_margin <- profit_after_tax / revenue
Mean_profit <- mean(profit_after_tax)
good_month <- c()
bad_month <- c()
for (x in profit_after_tax)
{if (x > Mean_profit)
{good_month <- c(good_month,x)}}
for (x in profit_after_tax)
{if (x < Mean_profit)
{bad_month <- c(bad_month,x)}}
?round()
round(good_month/1000)
profit_margin_percent <- round(profit_margin * 100)
best_month <- max(profit_after_tax)
worst_month <- min(profit_after_tax)
source('~/.active-rstudio-document', echo=TRUE)
tom = c(1,2)
months = tom
'Jan'
months = c(Jan,Feb)
Jan=c()
Feb=c()
months = c(Jan,Feb)
tom = c(1,2)
months = tom
Jan
Jan, Feb = tom
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
#Solution
#Calculate Profit As The Differences Between Revenue And Expenses
profit <- revenue - expenses
profit
tax <- round(0.30 * profit, 2)
tax
tax <- round(0.30 * profit)
tax
profit.after.tax <- profit - tax
profit.after.tax
profit.margin <- round(profit.after.tax/ revenue, 2) * 100
profit.margin
mean_pat <- mean(profit.after.tax)
mean_pat
Mean_profit <- mean(profit_after_tax) # Correct
good.months <- profit.after.tax> mean_pat
good.months
bad.months <- !good.months
bad.months
best.month <- profit.after.tax == max(profit.after.tax)
best.month
revenue.1000
tom = c()
for (x in 1:5){tom = c(tom,x**2)}
# Thus say from a list of [3,52,46,63,23,3,6,7,5,235,56]
# You want only the numbers which are more than 45:
So = c(3,52,46,63,23,3,6,7,5,235,56)
So = c(3,52,46,63,23,3,6,7,5,235,56)
new_list = c()
for (x in So)
{if (x > 45)
{new_list <- c(new_list,x)}}
new_list
?map
?map()
?Map()
Map(x*2,c(1,2,3))
Map(f=x*2,c(1,2,3))
Map(.x*2,c(1,2,3))
f <- x*2
maps <- function(v){v*2}
maps(c(1,2,3))
tom <- function(x){x*x}
tom(c(1,2,3))
sum(tom)
tim = tom(c(1,2,3))
sum(tim)
sqrt(sum(tim))
tom <- sum(function(x){x*x})
tom <- function(x){x*x}
tim <- tom(c(1,2,3))
tam <- sqrt(sum(tim))
tum <- tam/2
he <- 0
tim <- function(x){he + x}
tim(c(1,2,3))
tom = c()
tim <- function(x){tom = c(tom+x)}
tim(c(1,2,3))
ben = tim(c(1,2,3))
ben
tim <- function(x){tom <- c(tom+x)}
ben = tim(c(1,2,3))
ben
for (x in c(1,2,3)){x*x}
tom = for (x in c(1,2,3)){x*x}
tom
tom = for (x in c(1,2,3)){tom = c(tom,x*x)}
tom
tom = for (x in c(1,2,3)){tom = c(tom,x*x)}
tom = for (x in c(1,2,3)){tom = c(tom,x*x)}
tom
for (x in c(1,2,3)){tom = c(tom,x*x)}
tom
tom <- function(x){x*x}
tim <- tom(c(1,2,3))
tim
?round()
predict_age<-function(age1,age2,age3,age4,age5,age6,age7,age8){
round(sqrt(sum(square(c(age1,age2,age3,age4,age5,age6,age7,age8)))))/2
}
predict_age(65,60,75,55,60,63,64,45)
square <- function(x)(x**2)
predict_age<-function(age1,age2,age3,age4,age5,age6,age7,age8){
round(sqrt(sum(square(c(age1,age2,age3,age4,age5,age6,age7,age8)))))/2
}
predict_age(65,60,75,55,60,63,64,45)
predict_age(32,54,76,65,34,63,64,45)
round(sqrt(sum(square(c(age1,age2,age3,age4,age5,age6,age7,age8)))),0)/2
predict_age<-function(age1,age2,age3,age4,age5,age6,age7,age8){
round(sqrt(sum(square(c(age1,age2,age3,age4,age5,age6,age7,age8)))),0)/2
}
predict_age(65,60,75,55,60,63,64,45)
predict_age(32,54,76,65,34,63,64,45)
predict_age<-function(age1,age2,age3,age4,age5,age6,age7,age8){
round(sqrt(sum(square(c(age1,age2,age3,age4,age5,age6,age7,age8)))),2)/2
}
predict_age(65,60,75,55,60,63,64,45)
predict_age(32,54,76,65,34,63,64,45)
square <- function(x)(x**2)
predict_age<-function(age1,age2,age3,age4,age5,age6,age7,age8){
round(sqrt(sum(square(c(age1,age2,age3,age4,age5,age6,age7,age8)))),-1)/2
}
predict_age(65,60,75,55,60,63,64,45)
predict_age(32,54,76,65,34,63,64,45)
predict_age<-function(age1,age2,age3,age4,age5,age6,age7,age8){
round(sqrt(sum(square(c(age1,age2,age3,age4,age5,age6,age7,age8)))),0)/2
}
predict_age(65,60,75,55,60,63,64,45)
predict_age(32,54,76,65,34,63,64,45)
predict_age<-function(age1,age2,age3,age4,age5,age6,age7,age8){
round(sqrt(sum(square(c(age1,age2,age3,age4,age5,age6,age7,age8))))/2)
}
predict_age(65,60,75,55,60,63,64,45)
predict_age(32,54,76,65,34,63,64,45)
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
profit <- revenue - expenses
profit_after_tax <- profit/100 * 70  # 30% tax
profit_margin <- profit_after_tax / revenue  # profit margin is profit/ revenue
profit_margin_percent <- round(profit_margin * 100) # for % just multiply it by 100
Mean_profit <- mean(profit_after_tax)  # New function learnt- mean
good_month <- profit_after_tax > Mean_profit
bad_month <- !good.month  # Rmb that ! means -ve()
best_month <- max(profit_after_tax)  # max works same in r as it does in python
worst_month <- min(profit_after_tax) # Likewise for min
y = 0
n = 10000000  # Just change n here to see your answer
for (x in rnorm(n)){
if (x >= -1 & x<=1){y = y+1}
}
y_real = y/n*100
tom = toString(y_real)
tim = 'Mean(Xn) = '
tam = '%'
print(paste(tim,tom,tam,sep = ''))
pwd
g <- ggplot(data = movies,   # 1
aes(x = Genre, y = USPercent)) # 2
setwd("C:\\Users\\utkar\\Desktop\\UNI PREP\\Programming\\R\\R Programming A to Z")
getwd()
movies <- read.csv("Section6-Homework-Data.csv")
head(movies)
colnames(movies) <- c('ReleaseDay', 'Director', 'Genre', 'Title',
'ReleaseDate', 'Studio', 'AdjustedGross',
'Budget', 'Gross', 'Imdb', 'MovieLens',
'Overseas', 'OverseasPercent', 'Profit',
'ProfitPercent', 'Runtime', 'US', 'USPercent')
colnames(movies)
library(ggplot2)
g <- ggplot(data = movies,   # 1
aes(x = Genre, y = USPercent)) # 2
e <- g + geom_point(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
coord_cartesian(xlim = c(1,5)) # 6
setwd("C:\\Users\\utkar\\Desktop\\UNI PREP\\Programming\\R\\R Programming A to Z")
getwd()
stats <- read.csv("P2-Movie-Ratings.csv")
head(stats)
colnames(stats) <- c("Film", "Genre", "CriticRating", "AudienceRating", "BudgetMillions", "Year")
head(stats)
p <- ggplot(data = stats)
p + geom_point(aes(x= CriticRating, y=AudienceRating))
g <- ggplot(data = movies,   # 1
aes(x = Genre, y = USPercent)) # 2
e <- g + geom_point(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
coord_cartesian(xlim = c(1,5)) # 6
z <- ggplot(data = movies) + geom_point(aes(x = Genre, y = USPercent))
z <- ggplot(data = movies) + geom_point(aes(x = Genre, y = USPercent))
z <- ggplot(data = movies) + geom_point(aes(x = Genre, y = USPercent))
z <- ggplot(data = movies) + geom_point(aes(x = Overseas, y = USPercent))
movies
z
e
b
a <- ggplot(data = movies1,   # 1
aes(x = Genre, y = USPercent)) # 2
b <- a + geom_point(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
coord_cartesian(xlim = c(1,5)) # 6
a <- ggplot(data = movies1,   # 1
aes(x = Genre, y = USPercent)) # 2
setwd("C:\\Users\\utkar\\Desktop\\UNI PREP\\Programming\\R\\R Programming A to Z")
getwd()
movies <- read.csv("Section6-Homework-Data.csv")
head(movies)
colnames(movies) <- c('ReleaseDay', 'Director', 'Genre', 'Title',
'ReleaseDate', 'Studio', 'AdjustedGross',
'Budget', 'Gross', 'Imdb', 'MovieLens',
'Overseas', 'OverseasPercent', 'Profit',
'ProfitPercent', 'Runtime', 'US', 'USPercent')
colnames(movies)
movies
library(ggplot2)
g <- ggplot(data = movies,   # 1
aes(x = Genre, y = USPercent)) # 2
e <- g + geom_point(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
coord_cartesian(xlim = c(1,5)) # 6
e
movies1 <- movies[movies$Studio %in% names(which(table(movies$Studio) > 60)), ]
a <- ggplot(data = movies1,   # 1
aes(x = Genre, y = USPercent)) # 2
b <- a + geom_point(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
coord_cartesian(xlim = c(1,5)) # 6
b
b <- a + geom_point(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
coord_cartesian(xlim = c(1,3)) # 6
b
b <- a + geom_point(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
coord_cartesian(xlim = c(1,3,4)) # 6
b
?coord_cartesian
xlim
?xlim
b <- a + geom_point(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
coord_cartesian(xlim = c(Genre = 'action')) # 6
?coord_cartesian
b
b <- a + geom_point(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
coord_cartesian(xlim(Genre = 'action')) # 6
b
b <- a + geom_point(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
xlim(Genre = 'action') # 6
b
b <- a + geom_point(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
xlim(Genre = 'action', 'adventure') # 6
b
b <- a + geom_point(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
xlim(Genre = 'action', 'adventure','comedy','drama') # 6
b
b <- a + geom_point(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
xlim(Genre = 'action', 'adventure','animation','comedy','drama') # 6
b
b <- a + geom_jitter(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
xlim(Genre = 'action', 'adventure','animation','comedy','drama') # 6
b
# Add theme
b + xlab('Genre') + ylab('Gross % US') + ggtitle('Domestic Gross % by Genre')
?ggtitle
?theme
# Add theme
b + xlab('Genre') + ylab('Gross % US') + ggtitle('Domestic Gross % by Genre') +
?theme(axis.title = element_text(color= 'Blue'))
# Add theme
b + xlab('Genre') + ylab('Gross % US') + ggtitle('Domestic Gross % by Genre') +
theme(axis.title = element_text(color= 'Blue'))
?aes
b <- a + geom_jitter(aes(color = Studio, size = Budget), size = 10) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
xlim(Genre = 'action', 'adventure','animation','comedy','drama') # 6
b
b <- a + geom_jitter(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.5)) + # 3 & 4
xlim(Genre = 'action', 'adventure','animation','comedy','drama') # 6
b
b <- a + geom_jitter(aes(color = Studio, size = Budget)) + geom_boxplot(alpha = I(0.7)) + # 3 & 4
xlim(Genre = 'action', 'adventure','animation','comedy','drama') # 6
b
